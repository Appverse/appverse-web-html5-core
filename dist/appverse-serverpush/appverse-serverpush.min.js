/*! appverse-web-html5-core - v0.5.0 - */
!function(){"use strict";angular.module("appverse.serverPush",["appverse.socket.io","appverse.configuration"]).run(["$log",function(a){a.info("appverse.serverPush run")}])}(),function(){"use strict";angular.module("appverse.socket.io",["appverse.configuration"])}(),function(){"use strict";angular.module("appverse.socket.io").provider("Socket",["SERVERPUSH_CONFIG",function(a){var b,c="socket:";this.$get=["$rootScope","$timeout",function(d,e){var f=b||io.connect(a.BaseUrl,{resource:a.Resource,"connect timeout":a.ConnectTimeout,"try multiple transports":a.TryMultipleTransports,reconnect:a.Reconnect,"reconnection delay":a.ReconnectionDelay,"reconnection limit":a.ReconnectionLimit,"max reconnection attempts":a.MaxReconnectionAttempts,"sync disconnect on unload":a.SyncDisconnectOnUnload,"auto connect":a.AutoConnect,"flash policy port":a.FlashPolicyPort,"force new connection":a.ForceNewConnection}),g=function(a){return function(){var b=arguments;e(function(){a.apply(f,b)},0)}},h=function(a,b){f.on(a,g(b))},i=function(){f.removeAllListeners()},j={on:h,addListener:h,off:i,emit:function(a,b,c){c?f.emit(a,b,g(c)):f.emit(a,b)},forward:function(a,b){a instanceof Array==!1&&(a=[a]),b||(b=d),angular.forEach(a,function(a){var d=c+a,e=g(function(a){b.$broadcast(d,a)});b.$on("$destroy",function(){f.removeListener(a,e)}),f.on(a,e)})}};return j}],this.prefix=function(a){c=a},this.ioSocket=function(a){b=a}}])}(),function(){"use strict";angular.module("appverse.serverPush").factory("SocketFactory",["$rootScope","Socket",function(a,b){var c={};return c.listen=function(c,d){b.on(c,function(){var c=arguments;a.$apply(function(){d.apply(b,c)})})},c.sendMessage=function(c,d,e){b.emit(c,d,function(){var c=arguments;a.$apply(function(){e&&e.apply(b,c)})})},c.unsubscribeCommunication=function(a){b.off(a())},c}])}(),function(){"use strict";angular.module("appverse.serverPush").factory("WebSocketFactory",["$log","WEBSOCKETS_CONFIG",function(a,b){var c={};return c.open=function(d){if(!c.ws){var e=null;angular.isUndefined(d)&&(d=b.WS_URL),"auto"===b.WS_TYPE?"SockJS"in window&&(e=new SockJS(d)):"sockjs"===b.WS_TYPE&&(e=new SockJS(d)),null===e?(a.debug("WS_TYPE: native"),"WebSocket"in window?e=new WebSocket(d):"MozWebSocket"in window&&(e=new MozWebSocket(d))):a.debug("WS_TYPE: sockjs"),e.onopen=function(a){null!==e?(e.send(""),c.callback(a,b.WS_CONNECTED)):c.callback(a,b.WS_DISCONNECTED)},e.onerror=function(a){c.callback(a,b.WS_FAILED_CONNECTION)},e.onmessage=function(a){c.onmessagecallback(a)},e.onclose=function(){null!==e&&(e.close(),e=null)},c.ws=e}},c.onprotocolconnectcallback=function(a){c.callback(a,b.WS_PROTOCOL_CONNECTED)},c.onprotocoldisconnectcallback=function(a){c.callback(a,b.WS_PROTOCOL_DISCONNECTED)},c.connect=function(d,e,f){if(c.client)return void a.warn("factory.client already exists: "+c.client+"close it to reconect");if("none"===b.WS_PROTOCOL_TYPE)throw a.warn("No protocol configured WS_PROTOCOL_TYPE=none"),new TypeError("No protocol configured WS_PROTOCOL_TYPE=none");if(null===c.ws)return void a.warn("No underling websocket connection stablished, stablish a websocket connection first");var g=null;if("auto"===b.WS_PROTOCOL_TYPE||"stomp"===b.WS_PROTOCOL_TYPE)if("Stomp"in window){if(null===c.ws||angular.isUndefined(c.ws))return void a.warn("No underling websocket connection stablished, stablish a websocket connection first");g=Stomp.over(c.ws),a.debug("WS_TYPE: sockjs"),null!==b.WS_INTERVAL&&(g.heartbeat.outgoing=1e3*b.WS_INTERVAL),angular.isUndefined(f)?g.connect(d,e,c.onprotocolconnectcallback,c.onprotocoldisconectcallback,c.onprotocoldisconnectcallback):g.connect(d,e,f,c.onprotocoldisconnectcallback),g.disconect(c.onprotocoldisconnectcallback)}else a.debug("WS_TYPE: none");c.client=g},c.subscribe=function(b,d){if(null===c.client||angular.isUndefined(c.client))return a.warn("factory.client does not exists"),null;if("function"!=typeof d)throw new TypeError(d+" is not a function");return c.client.subscribe(b,d)},c.send=function(b,d,e){return null===c.client||angular.isUndefined(c.client)?void a.warn("factory.client does not exists"):void c.client.send(b,d,e)},c.unsubscribe=function(b){return!b||angular.isUndefined(b)?void a.warn("subscription does not exists"):void b.unsubscribe()},c.disconnect=function(){return!c.client||angular.isUndefined(c.client)?void a.warn("factory.client does not exists"):void c.client.disconnect()},c.sendRaw=function(b){a.debug("factory.ws: "+c.ws),c.ws.send(b)},c.onmessage=function(a){if("function"!=typeof a)throw new TypeError(a+" is not a function");c.onmessagecallback=a},c.onstatuschanged=function(a){if("function"!=typeof a)throw new TypeError(a+" is not a function");c.callback=a},c.close=function(){c.ws&&c.ws.close()},c.status=function(){return null===c.ws||angular.isUndefined(c.ws)?WebSocket.CLOSED:c.ws.readyState},c.statusAsText=function(){var a=c.status();return a===WebSocket.CONNECTING?b.CONNECTING:a===WebSocket.OPEN?b.OPEN:a===WebSocket.CLOSING?b.WS_CLOSING:a===WebSocket.CLOSED?b.WS_CLOSED:b.WS_UNKNOWN},c}])}();
//# sourceMappingURL=appverse-serverpush.min.js.map